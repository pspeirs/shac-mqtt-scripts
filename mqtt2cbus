-- A resident script to run on a Clipsal 5500SHAC to push MQTT events to Cbus.
-- Tested with 5500SHAC firmware v1.6
-- Install this script as a resident script with a sleep interval of 0 seconds

-- **********************************************************************
-- MOSQUITTO DOCUMENTATION
-- https://flukso.github.io/lua-mosquitto/docs/
-- **********************************************************************


-- *************  Broker Connection Configuration  *******************
mqtt_broker = 'x.x.x.x'
mqtt_username = 'username'
mqtt_password = 'password'
mqtt_userid = 'MQTT2CBUS'


-- *************  Broker Topic Configuration  *******************
mqtt_lwt_topic = 'shac/ha2cbus/lwt'
mqtt_lwt_offline = 'offline'
mqtt_lwt_online = 'online'
mqtt_publish_topic = 'cbus/read/'
mqtt_subscribe_topics = {"cbus/write/#", "cbus/read/heartbeat"}


-- *************  Load MQTT library and create new client *******************
mqtt = require("mosquitto")
log(string.format("Starting MQTT2CBUS - Mosquitto Version %s", mqtt.version()))
client = mqtt.new(mqtt_userid)
SetUserParam('Local Network', 'MQTT HA-CBUS NOCONNECT', 0)


-- ************* On Connect Callback Function ***************
client.ON_CONNECT = function()
    
    log(string.format("MQTT2CBUS - MQTT Client Connected to %s", mqtt_broker));
		SetUserParam('Local Network', 'MQTT HA-CBUS NOCONNECT', 0)
    client:publish(mqtt_lwt_topic, mqtt_lwt_online, 1, true)
    
    -- ************* Subscribe to all required topics ***************
    for idx = 1, table.maxn(mqtt_subscribe_topics)
	do
        mid = client:subscribe(mqtt_subscribe_topics[idx], 2);
        log(string.format("Subscribed to topic: %s", mqtt_subscribe_topics[idx]))   
	end
    
	-- ************* Publish to LWT topic ***************
    client:publish(mqtt_lwt_topic, mqtt_lwt_online, 1, false)

end


-- *********** On Disconnect Callback Function *************
client.ON_DISCONNECT = function()

    log(string.format("MQTT2CBUS - MQTT disconnected"))
    
    -- ********* Loop to keep trying a reconnection every 10 seconds ********
    while (client:reconnect() ~= true)
    do
        log(string.format("Error reconnecting to broker . . . Retrying"))
        os.sleep(10)
    end

end


-- **************** On Message Callback Function ***************
client.ON_MESSAGE = function(mid, topic, payload)

		--log(string.format("MQTT2CBUS - Received: %s %s", topic, payload))
  
  	parts = string.split(topic, "/")

  	
  	-- ******* Check if message is a ping then update the relevant user param
  	if (topic == "cbus/read/heartbeat") then
    	
    	if (GetUserParam('Local Network', 'MQTT Ping') == payload) then
      	SetUserParam('Local Network', 'MQTT State', 0)
      	log("Matching timestamp: %s")
      else
      	SetUserParam('Local Network', 'MQTT State', -1)
      	log("Mismatch timestamp")
      end
    
    -- Get value of user parameter 'now_temp' on local network
			--value = GetUserParam('Local', 'now_temp')

  	  --SetUserParam('Local Network', 'MQTT to Cbus Ping', payload)
    	--log(string.format("Topic: %s -> Payload: %u", topic, payload))
    	
  	  return
  	end
  
  
    if not parts[6] then
		log('MQTT2CBUS - MQTT error', 'Invalid message format')
		--log(string.format("Topic: %s -> Payload: %u", topic, payload))
    elseif parts[6] == "getall" then
    
        datatable = grp.all()
        for key,value in pairs(datatable) do
          dataparts = string.split(value.address, "/")
              network = tonumber(dataparts[1])
              app = tonumber(dataparts[2])
          group = tonumber(dataparts[3])
          if app == tonumber(parts[4]) and group ~= 0 then
                level = tonumber(value.data)
                state = (level ~= 0) and "ON" or "OFF"
                log(parts[3], app, group, state, level)
                client:publish(mqtt_publish_topic .. parts[3] .. "/" .. app .. "/" .. group .. "/state", state, 1, true)
                client:publish(mqtt_publish_topic .. parts[3] .. "/" .. app .. "/" .. group .. "/level", level, 1, true)
            end	
        end
        log('Done')

    elseif parts[6] == "switch" then
    	--log("Incoming Message")
	    if payload == "ON" then
    	    --log(string.format("MQTT2CBUS - SetCBusLevel(0, %u, %u, 255, 0)", parts[4], parts[5]))
        	SetCBusLevel(0, parts[4], parts[5], 255, 0)
	    elseif payload == "on" then
    	    --log(string.format("MQTT2CBUS - SetCBusLevel(0, %u, %u, 255, 0)", parts[4], parts[5]))
        	SetCBusLevel(0, parts[4], parts[5], 255, 0)
    	elseif payload == "OFF" then
        	--log(string.format("MQTT2CBUS - SetCBusLevel(0, %u, %u, 0, 0)", parts[4], parts[5]))
        	SetCBusLevel(0, parts[4], parts[5], 0, 0)
    	elseif payload == "off" then
        	--log(string.format("MQTT2CBUS - SetCBusLevel(0, %u, %u, 0, 0)", parts[4], parts[5]))
        	SetCBusLevel(0, parts[4], parts[5], 0, 0)
        else
            log(string.format("Unknown Message: %s %s", topic, payload))
        end
    
    elseif parts[6] == "measurement" then
    	SetCBusMeasurement(0, parts[4], parts[5], (payload / 10), 0)
    
    elseif parts[6] == "ramp" then

    	if payload == "ON" then
    		SetCBusLevel(0, parts[4], parts[5], 255)
            
    	elseif payload == "on" then
    		SetCBusLevel(0, parts[4], parts[5], 255)
            
    	elseif payload == "OFF" then
    		SetCBusLevel(0, parts[4], parts[5], 0)

     	elseif payload == "off" then
    		SetCBusLevel(0, parts[4], parts[5], 0)


      elseif tonumber(payload) then
        log(string.format("RAMP Message: %s %s", topic, payload))
    		ramp = string.split(payload, ",")
    		num = math.floor(ramp[1] + 0.5)
    		if num and num < 256 then
    			if ramp[2] ~= nil and tonumber(ramp[2]) > 1 then
    				SetCBusLevel(0, parts[4], parts[5], num, ramp[2])
                    
    			else
    				SetCBusLevel(0, parts[4], parts[5], num, 0)
                    
    			end
    		end
        else
            log(string.format("Unknown Message: %s %s", topic, payload))
    	end
-- Set application 56 group 1 on the local network to full brightness over 12 seconds.
--SetCBusLevel(0, 56, 1, 255, 12)

    elseif parts[6] == "cover" then
        
        local network = 254
        
    log(string.format("Cover Message: %s %s", topic, payload))
    
        if payload == "open" then
            log(string.format("OPEN Received: 0/%s/%s - %s ", parts[4], parts[5], 255))
            SetCBusLevel(0, parts[4], parts[5], 255, 0)
            client:publish(mqtt_publish_topic .. network .. "/" .. parts[4] .. "/" .. parts[5] .. "/level", 255, 1, false)
            
        elseif payload == "close" then
            log(string.format("CLOSE Received: 0/%s/%s - %s", parts[4], parts[5], 0))
            SetCBusLevel(0, parts[4], parts[5], 0, 0)
            client:publish(mqtt_publish_topic .. network .. "/" .. parts[4] .. "/" .. parts[5] .. "/level", 0, 1, false)
            
        elseif payload == "stop" then
            log(string.format("STOP Received: 0/%s/%s - %s", parts[4], parts[5], 5))
            SetCBusLevel(0, parts[4], parts[5], 5, 0)
            client:publish(mqtt_publish_topic .. network .. "/" .. parts[4] .. "/" .. parts[5] .. "/level", 5, 1, false)
            
        else
            log(string.format("Unknown Message: %s %s", topic, payload))
            
        end
	end
end


-- ************** Connect to Broker Function **************
function ConnectToBroker(broker)

    local retries = 0
    
    while (client:connect(broker) ~= true)
    do
        retries = retries + 1
        os.sleep(2)
        
        if (retries == 5) then
            retries = 0
          	mqtt_ha_cbus = GetUserParam('Local Network', 'MQTT HA-CBUS NOCONNECT')
	    			SetUserParam('Local Network', 'MQTT HA-CBUS NOCONNECT', mqtt_ha_cbus + 1)
	        	log(string.format("Error connecting to broker '%s' . . . Retrying", broker))
        end
    end
end


client:login_set(mqtt_username, mqtt_password);
client:will_set (mqtt_lwt_topic, mqtt_lwt_offline, 1, true);    
ConnectToBroker(mqtt_broker)

client:loop_forever()
