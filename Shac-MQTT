-- A resident script to run on a Clipsal 5500SHAC to push Cbus events to MQTT
-- Tested with 5500SHAC firmware v1.6
-- Install this script as a resident script with a sleep interval of 5 seconds


-- **********************************************************************
-- MOSQUITTO DOCUMENTATION
-- https://flukso.github.io/lua-mosquitto/docs/
-- **********************************************************************



-- ***************************************
-- *** UDP Configuration ***
-- ***************************************
udp_host = '127.0.0.1'
--udp_port = 8821
udp_port = 5432


-- ***************************************
-- *** MQTT Broker Configuration ***
-- ***************************************
mqtt_broker = '10.1.20.36'
mqtt_username = 'cbus'
mqtt_password = 'M@!shaba100'
mqtt_userid = 'cbus_mqtt'

--mqtt_broker = '10.1.20.50'
--mqtt_username = 'pspeirs'
--mqtt_password = 'M@!shaba100'


-- ***************************************
-- *** Set up LWT topics/values ***
-- ***************************************
mqtt_lwt_topic = 'cbus/lwt'
mqtt_lwt_offline = 'offline'
mqtt_lwt_online = 'online'


-- ***************************************
-- *** Set up pub/sub topics ***
-- ***************************************
mqtt_publish_topic = 'cbus/read'
mqtt_publish_topic_new = 'cbus/status'
mqtt_subscribe_topics = {'cbus/cmd/#', 'cbus/write/#'}


-- ***************************************
-- *** Load required MQTT module ***
-- ***************************************
mqtt = require("mosquitto")
log(string.format("Mosquitto Version %s", mqtt.version()))


-- ***************************************
-- *** create new mqtt client ***
-- ***************************************
--client = mqtt.new(mqtt_userid)
client = mqtt.new()
client:login_set(mqtt_username, mqtt_password);
client:will_set (mqtt_lwt_topic, mqtt_lwt_offline, 1, true);    


-- ***************************************
-- *** Set up UDP listener ***
-- ***************************************
server = require('socket').udp()
server:settimeout(1)
server:setsockname(udp_host, udp_port)
log(string.format("Opened UDP Socket on %s:%u", udp_host, udp_port))


-- ***************************************
-- *** MQTT Listener: ON_CONNECT ***
-- ***************************************
client.ON_CONNECT = function(client1, userdata, flags, rc)
    
  log(string.format("Connected to %s -> %s", mqtt_broker, flags));
    
  client:publish(mqtt_lwt_topic, mqtt_lwt_online, 1, true)
  
  -- Subscribe to any topics required
  for idx = 1, table.maxn(mqtt_subscribe_topics)
	do
      mid = client:subscribe(mqtt_subscribe_topics[idx], 2);
      log(string.format("Subscribing to topic: %s", mqtt_subscribe_topics[idx]))   
	end
    
    
    -- Reset all channels to not retaining if needed
--	for i = 201, 255 do
--    	client:publish(mqtt_publish_topic .. "254/250/" .. i .. "/state", "", 1, true)
--    	client:publish(mqtt_publish_topic .. "254/250/" .. i .. "/level", "", 1, true)
--	end 
    
end


-- ***************************************
-- *** MQTT Listener: ON_DISCONNECT ***
-- ***************************************
client.ON_DISCONNECT = function()

  log(string.format("MQTT disconnected"))

  client:reinitialise()
  
  while (client:reconnect() ~= true)
  do
    log(string.format("Error reconnecting to broker . . . Retrying"))
    os.sleep(5)
  end
  
  log("reconnected")
  
end



-- ***************************************
-- *** MQTT Listener: ON_SUBSCRIBE ***
-- ***************************************
client.ON_SUBSCRIBE = function()
    --log("Successfully subscribed to topic")
end


-- ***************************************
-- *** MQTT Listener: ON_MESSAGE ***
-- ***************************************
client.ON_MESSAGE = function(mid, topic, payload)
	
  parts = string.split(topic, "/")

  if table.maxn(parts) < 5 then
    log(string.format("Invalid MQTT message format: %s -> %s", topic, payload))
		return
  end
  
  log(string.format("MQTT IN: %s / %s", topic, payload))
  
--  if not parts[5] then
--    log(string.format("Invalid MQTT message format: %s -> %s", topic, payload))
--  else
--  	log(string.format("MQTT IN: %s / %s", topic, payload))
--  end
  
  
--  if parts[2] == 'cmd' then
--    if not table.maxn(parts) == 5 then
--      log("Correct Command 'cmd' Not Found")
--    end
----  elseif parts[2] == 'read' then
----    if not parts[2] == 'read' then
----      log("Correct Command 'read' Not Found")
----    end
--  end
    

	-- State message from broker
  if parts[6] == "state" then
    --log(string.format('Incoming Message -> %s', payload))
	  
    if payload == "on" then
    	log(string.format("SetCBusLevel(0, %u, %u, 255, 0)", parts[3], parts[4]))
--      SetCBusLevel(0, parts[3], parts[4], 255, 0)
   	
    elseif payload == "off" then
     	log(string.format("SetCBusLevel(0, %u, %u, 0, 0)", parts[3], parts[4]))
--     	SetCBusLevel(0, parts[3], parts[4], 0, 0)
    
    else
      log(string.format("Unknown Message: %s %s", topic, payload))
    end

    
  elseif parts[6] == "level" then

		if payload == "on" then
    	--log(string.format("SetCBusLevel(0, %u, %u, 255)", parts[3], parts[4]))
--    	SetCBusLevel(0, parts[3], parts[4], 255, 0)
            
    elseif payload == "off" then
    	--log(string.format("SetCBusLevel(0, %u, %u, 0)", parts[3], parts[3]))
--    	SetCBusLevel(0, parts[3], parts[4], 0, 0)

    elseif tonumber(payload) then
      log(string.format("Level Message: %s %s", topic, payload))
    	ramp = string.split(payload, ",")
    	num = math.floor(ramp[1] + 0.5)
    	if num and num < 256 then
    		if ramp[2] ~= nil and tonumber(ramp[2]) > 1 then
          --log(string.format("Ramp SetCBusLevel(0, %u, %u, %u, %u)", parts[3], parts[4], num, ramp[2]))
--    			SetCBusLevel(0, parts[3], parts[4], num, ramp[2])
                    
    		else
          --log(string.format("SetCBusLevel(0, %u, %u, %u, 0)", parts[3], parts[4], num))
--    			SetCBusLevel(0, parts[3], parts[4], num, 0)
                    
    		end
    	end
    else
      log(string.format("Unknown Message: %s %s", topic, payload))
    end

    
	-- Unsure whether we'd EVER send a measuremet back into CBUS as it wouldn't be used anywhere
--  elseif parts[6] == "measurement" then
--    --SetCBusMeasurement(0, parts[4], parts[5], (payload / 10), 0)
    

--  elseif parts[5] == "cover" then
        
--    --local network = 254
--    log(string.format("Cover Message: %s %s", topic, payload))
    
--    if payload == "open" then
--        log(string.format("OPEN Received: 0/%s/%s - %s ", parts[4], parts[5], 255))
--        --SetCBusLevel(0, parts[4], parts[5], 255, 0)
--        --client:publish(mqtt_publish_topic .. network .. "/" .. parts[4] .. "/" .. parts[5] .. "/level", 255, 1, false)
            
--    elseif payload == "close" then
--      log(string.format("CLOSE Received: 0/%s/%s - %s", parts[4], parts[5], 0))
--      --SetCBusLevel(0, parts[4], parts[5], 0, 0)
--      --client:publish(mqtt_publish_topic .. network .. "/" .. parts[4] .. "/" .. parts[5] .. "/level", 0, 1, false)
            
--    elseif payload == "stop" then
--      log(string.format("STOP Received: 0/%s/%s - %s", parts[4], parts[5], 5))
--      --SetCBusLevel(0, parts[4], parts[5], 5, 0)
--      --client:publish(mqtt_publish_topic .. network .. "/" .. parts[4] .. "/" .. parts[5] .. "/level", 5, 1, false)
            
--    else
--      log(string.format("Unknown Message: %s %s", topic, payload))
            
--    end
	end
end


--function ConnectToBroker(broker)

--    while (client:connect(broker) ~= true)
--    do
--        log(string.format("Error connecting to broker '%s' . . . Retrying", broker))
--        os.sleep(5)
--    end
--end






-- ***************************************
-- *** Function: Connect to Broker ***
-- ***************************************
function ConnectToBroker(broker)

    local retries = 0
    
    while (client:connect(broker) ~= true)
    do
        retries = retries + 1
        os.sleep(2)
        
        if (retries == 5) then
            retries = 0
--          	mqtt_ha_cbus = GetUserParam('Local Network', 'MQTT HA-CBUS NOCONNECT')
--	    			SetUserParam('Local Network', 'MQTT HA-CBUS NOCONNECT', mqtt_ha_cbus + 1)
	        	log(string.format("Error connecting to broker '%s' . . . Retrying", broker))
        end
    end
end



function ProcessUDP(data)
  
  parts = string.split(data, "/")
    
  if table.maxn(parts) < 4 then
   	log(string.format('Invalid UDP Msg Recvd: %s', data))
   	return
 	end

  network = 254
 	app = tonumber(parts[2])

    
  if (app == 228) then	-- Measurement
--            device_id = tonumber(parts[3])
--            channel_id = tonumber(parts[4])
--            value = tonumber(parts[5])
--            mqtt_msg = string.format('%s/%u/%u/%u/%s', mqtt_publish_topic, app, device_id, channel_id, "measurement")
--            --client:publish(mqtt_msg, value, 1, false)
--      			--log(mqtt_msg)
 
  elseif (app == 203) then	-- Enable Control
--            group = tonumber(parts[3])
--            level = tonumber(parts[4])
--            state = (level ~= 0) and "ON" or "OFF"
--      
--			      mqtt_msg = string.format('%s/%u/%u', mqtt_publish_topic, app, group)
--            --client:publish(mqtt_msg .. "/state", state, 1, false)
--            --client:publish(mqtt_msg .. "/level", level, 1, false)
--						log(mqtt_msg .. "/state")
      
	elseif (app == 250) then	-- User Parameters
--            group = tonumber(parts[3])
--            level = tonumber(parts[4])

--      			if (group == 2) then
--        			log(string.format('CBUS2MQTT - UDP Msg Recvd: %s %u', cmd, level))

--              mqtt_msg = string.format('%s/heartbeat', mqtt_publish_topic)
--            	--client:publish(mqtt_msg, level, 1, false)
--            	log(mqtt_msg, level)

--      			else
--            	mqtt_msg = string.format('%s/%u/%u/level', mqtt_publish_topic, app, group)
--            	--log(mqtt_msg, level)
--            	--client:publish(mqtt_msg, level, 1, false)
--        			log(strint.format('%s -> %u', mqtt_msg, level))
        
--            end
	elseif (app == 255) then	-- Unit Parameters
      
--            device = tonumber(parts[3])
--            channel = tonumber(parts[4])
--						value = tonumber(parts[5])
--            mqtt_msg = string.format('%s/%u/%u/%u/value', mqtt_publish_topic, app, device, channel)
--      			--client:publish(mqtt_msg, value, 1, false)
--      			--log(mqtt_msg, value)
            
	else
      			
		group = tonumber(parts[3])
    level = tonumber(parts[4])
  	state = (level ~= 0) and "on" or "off"

    mqtt_msg = string.format('%s/%u/%u/%u', mqtt_publish_topic, network, app, group)

    client:publish(mqtt_msg .. "/state", state, 0, true)
    client:publish(mqtt_msg .. "/level", level, 0, true)

 		log(string.format('PUBLISH: %s -> state: %s / level: %u', mqtt_msg, state, level))

    
    -- Also send message to new base topic to prepare for migration
    mqtt_msg = string.format('%s/%u/%u', mqtt_publish_topic_new, app, group)

    client:publish(mqtt_msg .. "/state", state, 0, true)
    client:publish(mqtt_msg .. "/level", level, 0, true)

 		log(string.format('PUBLISH: %s -> state: %s / level: %u', mqtt_msg, state, level))
    
    
	end
end


-- ***************************************
-- *** Start connection to MQTT Broker ***
-- ***************************************
ConnectToBroker(mqtt_broker)
client:loop_start()



-- Reset all channels to not retaining if needed
--for i = 11, 40 do
--    client:publish(mqtt_publish_topic .. "254/56/" .. i .. "/state", "", 1, true)
--    client:publish(mqtt_publish_topic .. "254/56/" .. i .. "/level", "", 1, true)
--    log("Message Sent Grp " .. i)
--end 



-- ***************************************
-- *** Loop to monitor UDP messages
-- ***************************************
while true do
	cmd,err,partial = server:receive()
  
	if cmd then

  	parts = string.split(cmd, "/")
    
  	if table.maxn(parts) < 4 then
   		log(string.format('Invalid UDP Msg Recvd: %s / Err: %s / Partial: %s', cmd, err, partial))

    else
			ProcessUDP(cmd)
    
    end
    
	end
end








